// Generated by CoffeeScript 1.9.1
var animate, camera, canvas, container, context, createImage, geometry, group, init, initCamera, initObject, initStats, j, material, mesh, obj, render, renderer, results, run, scene, texture;

mesh = void 0;

container = void 0;

canvas = void 0;

context = void 0;

texture = void 0;

camera = void 0;

scene = void 0;

renderer = void 0;

geometry = void 0;

material = void 0;

obj = (function() {
  results = [];
  for (j = 0; j <= 100; j++){ results.push(j); }
  return results;
}).apply(this);

group = void 0;

initCamera = function() {
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
  camera.position.z = 400;
};

init = function() {
  container = document.createElement('div');
  document.body.appendChild(container);
  scene = new THREE.Scene();
  group = new THREE.Group();
  group.position.y = 50;
  group.position.x = Math.random() * 100;
  scene.add(group);
  renderer = new THREE.WebGLRenderer();
  renderer.setClearColor("#FF7F50");
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);
};

initObject = function() {
  var i, index, k, len;
  geometry = new THREE.BoxGeometry(Math.random() * 10, Math.random() * 70, Math.random() * 200);
  texture = new THREE.Texture(createImage());
  texture.needsUpdate = true;
  material = new THREE.MeshBasicMaterial({
    map: texture,
    wireframe: false
  });
  for (index = k = 0, len = obj.length; k < len; index = ++k) {
    i = obj[index];
    obj[index] = new THREE.Mesh(geometry, material);
    group.add(obj[index]);
    geometry.dispose();
    material.dispose();
    texture.dispose();
  }
};

createImage = function() {
  canvas = document.createElement('canvas');
  canvas.width = 250 * Math.random();
  canvas.height = 750 * Math.random();
  context = canvas.getContext('2d');
  context.fillStyle = 'rgb(' + Math.floor(Math.random() * 156) + ',' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ')';
  context.fillRect(0, 0, 106, 156);
  return canvas;
};

render = function() {
  var i, index, k, len;
  for (index = k = 0, len = obj.length; k < len; index = ++k) {
    i = obj[index];
    make_pos(i, rnd(-100), rnd(-100), rnd(150));
    make_rotate(i, rnd(2000), rnd(-1000), rnd(1000));
    make_pos(group, rnd(-10), rnd(-10), rnd(0));
    make_rotate(group, rnd(1200), rnd(1200), rnd(1200));
    make_rotate(camera, 1, 1, 1);
    renderer.render(scene, camera);
  }
};

initStats = function() {
  var stats;
  stats = new Stats();
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.top = '0px';
  container.appendChild(stats.domElement);
};

animate = function() {
  requestAnimationFrame(animate);
  render();
};

run = function() {
  initCamera();
  init();
  initObject();
  initStats();
  animate();
};

run();

//# sourceMappingURL=memory.js.map

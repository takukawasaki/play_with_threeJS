// Generated by CoffeeScript 1.9.1
var HEIGHT, WIDTH, animate, attributes, camera, geometry, geometry2, init, initCamera, initObj, initStats, next, onWindowResize, pos, radius, render, renderer, rings, run, scene, segments, sphere, stats, uniforms, vc1, vertices;

if (!Detector.webgl) {
  Detector.addGetWebGLMessage();
}

renderer = void 0;

scene = void 0;

camera = void 0;

stats = void 0;

sphere = void 0;

uniforms = void 0;

attributes = void 0;

vc1 = void 0;

WIDTH = window.innerWidth;

HEIGHT = window.innerHeight;

sphere = void 0;

geometry = void 0;

geometry2 = void 0;

vertices = void 0;

radius = 0;

segments = 0;

rings = 0;

pos = {
  radius: 60,
  segments: 100,
  rings: 800
};

next = {
  x: pos.radius + 1,
  y: pos.segments,
  z: pos.rings
};

initCamera = function() {
  camera = new THREE.PerspectiveCamera(45, WIDTH / HEIGHT, 1, 10000);
  camera.position.z = 300;
};

init = function() {
  var container;
  scene = new THREE.Scene();
  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(WIDTH, HEIGHT);
  renderer.setClearColor('#191970');
  container = document.getElementById('container');
  container.appendChild(renderer.domElement);
  window.addEventListener('resize', onWindowResize, false);
};

initObj = function() {
  var j, ref, shaderMaterial, v, values_color, values_size;
  attributes = {
    size: {
      type: 'f',
      value: []
    },
    ca: {
      type: 'c',
      value: []
    }
  };
  uniforms = {
    amplitude: {
      type: 'f',
      value: 4.0
    },
    color: {
      type: 'c',
      value: new THREE.Color("#E0FFFF")
    },
    texture: {
      type: 't',
      value: THREE.ImageUtils.loadTexture('../textures/lensflare0.png')
    }
  };
  uniforms.texture.value.wrapS = uniforms.texture.value.wrapT = THREE.RepeatWrapping;
  shaderMaterial = new THREE.ShaderMaterial({
    uniforms: uniforms,
    attributes: attributes,
    transparent: true
  });
  radius = 60;
  segments = 100;
  rings = 2000;
  geometry = new THREE.SphereGeometry(radius, segments, rings);
  vc1 = geometry.vertices.length;
  geometry2 = new THREE.BoxGeometry(7.8 * radius, 2.8 * radius, 1.8 * radius, Math.random() * 20, 100, Math.random());
  geometry.merge(geometry2);
  sphere = new THREE.PointCloud(geometry, shaderMaterial);
  vertices = sphere.geometry.vertices;
  values_size = attributes.size.value;
  values_color = attributes.ca.value;
  for (v = j = 0, ref = vertices.length; 0 <= ref ? j < ref : j > ref; v = 0 <= ref ? ++j : --j) {
    values_size[v] = 1000;
    values_color[v] = new THREE.Color("#E0FFFF");
    if (v < vc1) {
      values_color[v].setHSL(44.31 + 3.1 * v / vc1, 100.99, (vertices[v].y + radius) / (4 * radius));
    } else {
      values_size[v] = 400;
      values_color[v].setHSL(11.6, 0.75, 8.25 + vertices[v].y / (2 * radius));
    }
  }
  scene.add(sphere);
};

initStats = function() {
  stats = new Stats;
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.top = '0px';
  container.appendChild(stats.domElement);
};

onWindowResize = function() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
};

animate = function() {
  requestAnimationFrame(animate);
  render();
  stats.update();
};

render = function() {
  var i, time;
  time = Date.now() * 0.005;
  sphere.rotation.y = 0.02 * time;
  sphere.rotation.z = 0.02 * time;
  i = 0;
  while (i < attributes.size.value.length) {
    if (i < vc1) {
      attributes.size.value[i] = 16 + 120 * Math.sin(0.1 * i + time);
    }
    i++;
  }
  attributes.size.needsUpdate = true;
  sphere.position.x += Math.random();
  sphere.position.y += Math.random();
  sphere.position.z += Math.random();
  if (sphere.position.x > 30) {
    sphere.position.x -= Math.random();
  }
  if (sphere.position.y > 30) {
    sphere.position.y -= Math.random();
  }
  if (sphere.position.z > 40) {
    sphere.position.z -= Math.random();
  }
  renderer.render(scene, camera);
};

run = function() {
  initCamera();
  init();
  initObj();
  initStats();
  animate();
};

run();

//# sourceMappingURL=attr_particle.js.map

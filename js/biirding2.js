// Generated by CoffeeScript 1.9.1
var SCREEN_HEIGHT, SCREEN_HEIGHT_HALF, SCREEN_WIDTH, SCREEN_WIDTH_HALF, animate, bird, birds, boid, boids, camera, initCamera, initObject, initStart, initStats, onDocumentMouseMove, onWindowResize, render, renderer, scene, start, stats, view;

SCREEN_WIDTH = window.innerWidth;

SCREEN_HEIGHT = window.innerHeight;

SCREEN_WIDTH_HALF = SCREEN_WIDTH / 2;

SCREEN_HEIGHT_HALF = SCREEN_HEIGHT / 2;

camera = void 0;

scene = void 0;

renderer = void 0;

birds = void 0;

bird = void 0;

boid = void 0;

boids = void 0;

stats = void 0;

view = void 0;

initStart = function() {
  view = document.createElement('div');
  document.body.appendChild(view);
  renderer = new THREE.WebGLRenderer();
  renderer.setClearColor('#87CEEB');
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
  document.body.appendChild(renderer.domElement);
  scene = new THREE.Scene();
};

initCamera = function() {
  camera = new THREE.PerspectiveCamera(80, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000);
  camera.position.x = Math.random() * 400;
  camera.position.y = Math.random() * 100;
  camera.position.z = Math.random() * 150;
  camera.rotation.x = Math.random() * 120;
  camera.rotation.y = Math.random() * 200;
  camera.rotation.z = Math.random() * 100;
  camera.up.set(200, 400, 500);
  camera.rotationAutoUpdate;
  camera.lookAt(scene.position);
};

initObject = function() {
  var i, index, j, k, l, len, results;
  birds = [];
  boids = [];
  i = (function() {
    results = [];
    for (k = 0; k <= 500; k++){ results.push(k); }
    return results;
  }).apply(this);
  for (index = l = 0, len = i.length; l < len; index = ++l) {
    j = i[index];
    boid = boids[j] = new Boid();
    boid.position.x = Math.random() * 400 - 100;
    boid.position.y = Math.random() * 400 - 300;
    boid.position.z = Math.random() * 400 - 200;
    boid.velocity.x = Math.random() * 10 - 2;
    boid.velocity.y = Math.random() * 10 - 2;
    boid.velocity.z = Math.random() * 10 - 2;
    boid.setAvoidWalls(true);
    boid.setWorldSize(800, 700, 700);
    bird = birds[j] = new THREE.Mesh(new Bird(), new THREE.MeshBasicMaterial({
      color: Math.random() * 100,
      side: THREE.DoubleSide
    }));
    bird.phase = Math.floor(Math.random() * 100.83);
    scene.add(bird);
  }
};

initStats = function() {
  stats = new Stats();
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.left = '0px';
  stats.domElement.style.top = '0px';
  view.appendChild(stats.domElement);
};

onWindowResize = function() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
};

onDocumentMouseMove = function(event) {
  var i, il, vector;
  vector = new THREE.Vector3(event.clientX - SCREEN_WIDTH_HALF, -event.clientY + SCREEN_HEIGHT_HALF, 0);
  i = 0;
  il = boids.length;
  while (i < il) {
    boid = boids[i];
    vector.z = boid.position.z;
    boid.repulse(vector);
    i++;
  }
};

animate = function() {
  requestAnimationFrame(animate);
  render();
  stats.update();
};

render = function() {
  var color, i, k, len, v;
  for (i = k = 0, len = birds.length; k < len; i = ++k) {
    v = birds[i];
    boid = boids[i];
    boid.run(boids);
    bird = birds[i];
    bird.position.copy(boids[i].position);
    color = bird.material.color;
    color.r = color.g = color.b = (500 - bird.position.z) / 1000;
    bird.rotation.y = Math.atan2(-boid.velocity.z, boid.velocity.x);
    bird.rotation.z = Math.asin(boid.velocity.y / boid.velocity.length());
    bird.phase = (bird.phase + Math.max(0, bird.rotation.z) + 0.1) % 62.83;
    bird.geometry.vertices[5].y = bird.geometry.vertices[4].y = Math.sin(bird.phase) * 5;
  }
  renderer.render(scene, camera);
};

start = function() {
  initStart();
  initCamera();
  initObject();
  animate();
};

window.addEventListener('resize', onWindowResize, false);

document.addEventListener('mousemove', onDocumentMouseMove, false);

start();

//# sourceMappingURL=biirding2.js.map
